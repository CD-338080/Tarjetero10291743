import logging
import os
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes, ConversationHandler, MessageHandler, filters
from PIL import Image, ImageOps
import pytesseract
from io import BytesIO

# Configuraci√≥n b√°sica de logging
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

# Estados para las conversaciones
(MAIN_MENU, PRODUCTS, PAYMENT, FAQ, REFERRALS, WAITING_RECEIPT) = range(6)

# Diccionario simple para almacenar referencias (en una implementaci√≥n real usar√≠as una base de datos)
referrals = {}

# Cache para evitar duplicados
processed_photos = set()

# Configuraci√≥n para botones fijos en escritorio
def create_reply_keyboard(buttons, one_time_keyboard=False):
    """Crea un teclado de respuesta con botones fijos donde se escribe"""
    return ReplyKeyboardMarkup(buttons, resize_keyboard=True, one_time_keyboard=one_time_keyboard)

# Para los teclados inline que seguiremos usando en algunos casos
def create_inline_keyboard(buttons):
    """Crea un teclado con botones inline"""
    return InlineKeyboardMarkup(buttons)

# Funci√≥n para validar texto extra√≠do
def validate_receipt_text(text):
    keywords = [
        # Spanish keywords
        "BANCO", "PAYPAL", "TRANSFERENCIA", "DEP√ìSITO",
        "OXXO", "SANTANDER", "BANAMEX", "CITIBANAMEX",
        "CAJERO", "COMPROBANTE", "RECIBO", "REFERENCIA",
        "ABONO", "PAGO", "OPERACI√ìN EXITOSA", "IMPORTE TRANSFERIDO",
        "TRANSACCI√ìN", "REMITENTE", "DESTINATARIO", "MONTO",
        "CANTIDAD", "CONFIRMACI√ìN", "CUENTA", "RETIRO",
        "ESTADO DE CUENTA", "SALDO", "CR√âDITO", "D√âBITO",
        "TRANSFERENCIA BANCARIA", "GIRO", "REMESA", "N√öMERO DE OPERACI√ìN",
        "PAGO PROCESADO", "APROBADO", "AUTORIZADO", "N√öMERO DE CONFIRMACI√ìN",
        "TRANSFERENCIA ELECTR√ìNICA", "BENEFICIARIO", "PAGADO", "COMPLETADO",
        "BITCOIN", "CRIPTOMONEDA", "BILLETERA", "MONEDERO DIGITAL",
        "INTERCAMBIO", "BBVA", "BANCOMER", "HSBC",
        "BANORTE", "SCOTIABANK", "INBURSA", "AFIRME",
        "BANJERCITO", "BANCOPPEL", "BANCO AZTECA", "SPEI",
        "CLABE", "TARJETA", "EFECTIVO", "MOVIMIENTO",
        "TERMINAL", "PUNTO DE VENTA", "TPV", "COMISI√ìN",
        "CARGO", "ABONO", "FECHA VALOR", "CONCEPTO",
        "FOLIO", "CLAVE DE RASTREO", "ENV√çO", "RECEPCI√ìN",
        
        # English keywords
        "TRANSACTION", "SENDER", "PAYMENT", "RECEIPT", 
        "TRANSFER", "BANK", "AMOUNT", "SUCCESSFUL",
        "CONFIRMATION", "REFERENCE", "ACCOUNT", "DEPOSIT",
        "WITHDRAWAL", "STATEMENT", "BALANCE", "CREDIT",
        "DEBIT", "WIRE TRANSFER", "MONEY ORDER", "REMITTANCE",
        "TRANSACTION ID", "PAYMENT PROCESSED", "APPROVED", "AUTHORIZED",
        "CONFIRMATION NUMBER", "ELECTRONIC TRANSFER", "ACH", "SWIFT",
        "ROUTING NUMBER", "BENEFICIARY", "PAID", "COMPLETED",
        "BITCOIN", "CRYPTO", "BLOCKCHAIN", "WALLET",
        "EXCHANGE", "BINANCE", "COINBASE", "TETHER"
    ]
    found_keywords = [keyword for keyword in keywords if keyword in text.upper()]
    if found_keywords:
        return True
    return False

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Comando inicial que muestra el men√∫ principal."""
    user = update.effective_user
    
    # Verificar si el usuario fue referido por alguien
    if context.args and len(context.args) > 0:
        referrer_id = context.args[0]
        try:
            # Validar que el ID del referente sea num√©rico
            int(referrer_id)
            # A√±adir al usuario actual a la lista de referidos del referente
            if referrer_id not in referrals:
                referrals[referrer_id] = []
            if str(user.id) not in referrals[referrer_id]:
                referrals[referrer_id].append(str(user.id))
                await update.message.reply_text(
                    f"üéÅ ¬°Has sido referido por un usuario VIP! Recibir√°s un 10% de descuento en tu primera compra. üéÅ"
                )
        except ValueError:
            # Si el ID no es v√°lido, ignoramos silenciosamente
            pass
    
    welcome_message = f"""
üåü *¬°BIENVENIDO A PREMIUM CARDS, {user.first_name}!* üåü

Has accedido al servicio exclusivo de tarjetas premium con la mayor tasa de √©xito del mercado.

‚úÖ *¬øQU√â NOS DIFERENCIA?*
‚Ä¢ Material verificado 100% live ‚úì
‚Ä¢ Soporte 24/7 personalizado üõéÔ∏è
‚Ä¢ Garant√≠a de reemplazo en todas nuestras tarjetas üîÑ
‚Ä¢ Los mejores precios del mercado üí≤
‚Ä¢ M√°s de 5 a√±os de experiencia en el sector üèÜ

üî• *OFERTA DE BIENVENIDA:* 15% de descuento en tu primera compra usando el c√≥digo "WELCOME15" üéâ

‚ö†Ô∏è *IMPORTANTE:* √önete a nuestro canal de respaldo @RespaldoSAULGOODMAN para estar siempre conectado en caso de ca√≠das.

Selecciona una opci√≥n para comenzar tu experiencia premium:
"""
    
    keyboard = [
        [KeyboardButton("üõí Productos Premium"), KeyboardButton("üí∞ Pagar Ahora")],
        [KeyboardButton("‚ùì Preguntas Frecuentes"), KeyboardButton("üë• Programa de Referencias VIP")],
    ]
    
    reply_markup = create_reply_keyboard(keyboard)
    
    await update.message.reply_text(
        welcome_message,
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )
    
    return MAIN_MENU

async def text_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Maneja los mensajes de texto del usuario (para los botones de respuesta)."""
    text = update.message.text
    
    # Men√∫ principal
    if text == "üõí Productos Premium":
        return await products_menu(update, context)
    elif text == "üí∞ Pagar Ahora":
        return await payment_menu(update, context)
    elif text == "‚ùì Preguntas Frecuentes":
        return await faq_menu(update, context)
    elif text == "üë• Programa de Referencias VIP":
        return await referrals_menu(update, context)
    elif text == "‚¨ÖÔ∏è Volver al Men√∫":
        return await main_menu(update, context)
    
    # Men√∫s secundarios
    elif text == "üî• Oferta Especial":
        return await special_offer(update, context)
    elif text == "üì∏ Enviar Comprobante":
        return await request_receipt(update, context)
    
    # Selecci√≥n de productos
    elif text.startswith(("1Ô∏è‚É£", "2Ô∏è‚É£", "3Ô∏è‚É£", "4Ô∏è‚É£", "5Ô∏è‚É£", "6Ô∏è‚É£", "7Ô∏è‚É£", "8Ô∏è‚É£", "9Ô∏è‚É£", "üîü", "1Ô∏è1Ô∏è‚É£")):
        return await product_selected(update, context)
    
    # Si no coincide con ning√∫n bot√≥n, informar al usuario
    await update.message.reply_text(
        "‚ö†Ô∏è Comando no identificado. Por favor, presiona /start para iniciar el bot correctamente."
    )
    return MAIN_MENU

async def handle_receipt(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Procesa las fotos de comprobantes de pago."""
    if update.message.photo:
        user = update.message.from_user
        username = user.username or "Usuario sin username"
        photo = update.message.photo[-1].file_id

        if photo in processed_photos:
            await update.message.reply_text("‚ö†Ô∏è Este comprobante ya ha sido procesado. Por favor env√≠a uno nuevo si necesitas realizar otro pago. üîÑ")
            return WAITING_RECEIPT

        processed_photos.add(photo)
        await update.message.reply_text("‚úÖ Comprobante recibido. Validando... Por favor espera un momento. üïí")

        try:
            # Descargar y procesar la foto en memoria
            photo_file = await context.bot.get_file(photo)
            photo_stream = BytesIO()
            await photo_file.download_to_memory(photo_stream)

            # Procesar la imagen con PIL
            img = Image.open(photo_stream)
            img = ImageOps.grayscale(img)
            img = ImageOps.autocontrast(img)
            
            # Intentar extraer texto si Tesseract est√° configurado
            try:
                extracted_text = pytesseract.image_to_string(img, lang='spa')
                is_valid = validate_receipt_text(extracted_text)
            except Exception as tesseract_error:
                logging.warning(f"Error en Tesseract: {tesseract_error}")
                # Si falla Tesseract, asumimos que es v√°lido
                is_valid = True

            # Guardar informaci√≥n del producto seleccionado
            product_info = ""
            if "selected_product" in context.user_data:
                product_info = f"\nüì¶ Producto: {context.user_data['selected_product']}"
                if "selected_price" in context.user_data:
                    product_info += f"\nüí∞ Precio: ${context.user_data['selected_price']} MXN"

            # Enviar al canal de administraci√≥n
            await context.bot.send_photo(
                chat_id="-1002589488630",  # ID del canal donde se enviar√°n los comprobantes
                photo=photo,
                caption=f"üì• Nuevo comprobante de pago.\nüë§ Usuario: {user.first_name} (@{username}).{product_info}\nüÜî ID: {user.id}"
            )
            
            await update.message.reply_text(
                "‚úÖ ¬°Comprobante recibido con √©xito! Tu pago ser√° procesado en breve y recibir√°s tu material. üî•\n\n"
                "Un administrador se pondr√° en contacto contigo pronto. ‚è±Ô∏è"
            )
            
            # Volver al men√∫ principal
            return await main_menu(update, context)
            
        except Exception as e:
            logging.error(f"Error procesando comprobante: {e}")
            await update.message.reply_text(
                "‚ùå Error procesando el comprobante. Por favor aseg√∫rate que la imagen sea clara y vuelve a intentarlo. "
                "Si el problema persiste, contacta al administrador. ‚è≥"
            )
            return WAITING_RECEIPT
    else:
        await update.message.reply_text(
            "üì∏ Por favor, env√≠a una foto clara de tu comprobante de pago.\n\n"
            "Aseg√∫rate de que se vean todos los detalles de la transacci√≥n."
        )
        return WAITING_RECEIPT

async def request_receipt(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Solicita al usuario que env√≠e un comprobante de pago."""
    await update.message.reply_text(
        "üì∏ *ENV√çO DE COMPROBANTE DE PAGO* üì∏\n\n"
        "Por favor, env√≠a una foto clara de tu comprobante de pago.\n\n"
        "‚úÖ *CONSEJOS PARA UN PROCESAMIENTO R√ÅPIDO:*\n"
        "‚Ä¢ Aseg√∫rate de que se vean todos los detalles de la transacci√≥n\n"
        "‚Ä¢ La imagen debe estar bien iluminada y enfocada\n"
        "‚Ä¢ Incluye la fecha y hora de la transacci√≥n\n"
        "‚Ä¢ Si es transferencia, aseg√∫rate que se vea el n√∫mero de referencia\n\n"
        "‚è±Ô∏è Tu comprobante ser√° procesado inmediatamente.",
        parse_mode='Markdown'
    )
    return WAITING_RECEIPT

async def button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Maneja las pulsaciones de botones inline (para casos espec√≠ficos)."""
    query = update.callback_query
    await query.answer()
    
    choice = query.data
    
    if choice == "main_menu":
        await main_menu(update, context)
        return MAIN_MENU
    
    return MAIN_MENU

async def main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Muestra el men√∫ principal."""
    keyboard = [
        [KeyboardButton("üõí Productos Premium"), KeyboardButton("üí∞ Pagar Ahora")],
        [KeyboardButton("‚ùì Preguntas Frecuentes"), KeyboardButton("üë• Programa de Referencias VIP")],
    ]
    
    reply_markup = create_reply_keyboard(keyboard)
    
    menu_text = """
üìã *MEN√ö PRINCIPAL* üìã

Selecciona una opci√≥n:

üõí *Productos Premium* - Ver nuestro cat√°logo de productos
üí∞ *Pagar Ahora* - Realizar un pago por un producto
‚ùì *Preguntas Frecuentes* - Resolver tus dudas
üë• *Programa de Referencias VIP* - Gana recompensas por referir amigos
"""
    
    if update.callback_query:
        await update.callback_query.edit_message_text(
            text="Volviendo al men√∫ principal..."
        )
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text=menu_text,
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
    else:
        await update.message.reply_text(
            text=menu_text,
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
    
    return MAIN_MENU

async def special_offer(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Muestra la oferta especial."""
    mensaje = """
üî• *OFERTA ESPECIAL LIMITADA* üî•

‚ö° *PACK PREMIUM 10 TARJETAS AMEX*
   ‚Ä¢ Precio normal: $4,500 MXN
   ‚Ä¢ Precio oferta: $3,500 MXN
   ‚Ä¢ Ahorro: $1,000 MXN (22%)
   ‚Ä¢ Tasa de √©xito: 95%
   ‚Ä¢ Incluye: Soporte 24/7 + Reemplazo garantizado

‚è∞ Esta oferta expira en 24 horas. ¬°No esperes m√°s!

üëâ Selecciona "üì∏ Enviar Comprobante" para realizar tu pago y aprovechar esta promoci√≥n exclusiva.
"""
    
    keyboard = [
        [KeyboardButton("üì∏ Enviar Comprobante")],
        [KeyboardButton("‚¨ÖÔ∏è Volver al Men√∫")],
    ]
    
    reply_markup = create_reply_keyboard(keyboard)
    
    await update.message.reply_text(
        text=mensaje,
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )
    
    return PRODUCTS

async def payment_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Muestra las opciones de pago."""
    mensaje = """
üí∞ *M√âTODOS DE PAGO SEGUROS* üí∞

Aceptamos los siguientes m√©todos de pago:

üîê *CRIPTOMONEDAS (RECOMENDADO):*

‚Ä¢ *Bitcoin (BTC):*
```
bc1qnctxqv5x3mkxts0wwjhrf7jfgkveskefgjzvxc
```

‚Ä¢ *Tether (USDT):*
```
TVEzPvhRKiZJxDBDXyu5wBaYp6GNS3n13N
```

‚Ä¢ *Dogecoin (DOGE):*
```
D8pxbdYEjE5gAdgu6iZ4PvuuMENFYhJLhx
```

‚Ä¢ *Binance Coin (BNB):*
```
0x5b0d069c697637870FE9E44216039CdacBe65F22
```

üí≥ *TRANSFERENCIA BANCARIA:*

‚Ä¢ *CUENTA:*
```
943393460018
```

‚Ä¢ *CLABE:*
```
058597000070781636
```

‚Ä¢ *TITULAR:*
```
Juan Jes√∫s Salcido dominguez
```

‚Ä¢ *DEP√ìSITO OXXO (TARJETA):*
```
4741742972795879
```

‚ö†Ô∏è *IMPORTANTE*: 
‚Ä¢ Env√≠a foto del comprobante de pago usando el bot√≥n de abajo
‚Ä¢ Especifica qu√© producto est√°s comprando
‚Ä¢ Recibir√°s tu material en minutos tras confirmar el pago

üîí *PROCESO DE COMPRA:*
1Ô∏è‚É£ Realiza tu pago
2Ô∏è‚É£ Env√≠a comprobante con el bot√≥n de abajo
3Ô∏è‚É£ Recibe tu material en minutos
"""
    
    keyboard = [
        [KeyboardButton("üì∏ Enviar Comprobante")],
        [KeyboardButton("‚¨ÖÔ∏è Volver al Men√∫")],
    ]
    
    reply_markup = create_reply_keyboard(keyboard)
    
    if update.callback_query:
        await update.callback_query.edit_message_text(text=mensaje, parse_mode='Markdown')
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text="Selecciona una opci√≥n:",
            reply_markup=reply_markup
        )
    else:
        await update.message.reply_text(text=mensaje, parse_mode='Markdown')
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text="Selecciona una opci√≥n:",
            reply_markup=reply_markup
        )
    
    return PAYMENT

async def faq_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Muestra las preguntas frecuentes."""
    mensaje = """
‚ùì *PREGUNTAS FRECUENTES* ‚ùì

*¬øQu√© es el carding?*
El carding es el uso de informaci√≥n de tarjetas para realizar compras o transacciones en l√≠nea.

*¬øLas tarjetas tienen garant√≠a?*
S√≠, todas nuestras tarjetas tienen garant√≠a de reemplazo si no funcionan en las primeras 24 horas.

*¬øEl curso incluye material?*
S√≠, todos nuestros cursos incluyen tarjetas para practicar. El curso b√°sico incluye 3 tarjetas y el avanzado 7 tarjetas premium.

*¬øQu√© necesito para comenzar?*
Si eres principiante, recomendamos empezar con nuestro curso b√°sico. Si ya tienes experiencia, puedes adquirir directamente nuestras tarjetas premium.

*¬øTienen soporte despu√©s de la compra?*
S√≠, ofrecemos soporte t√©cnico 24/7 para resolver cualquier duda o problema que puedas tener.

*¬øC√≥mo s√© que el material funciona?*
Nuestro material es verificado antes de ser enviado y tiene una tasa de √©xito del 93%. Adem√°s, ofrecemos garant√≠a de reemplazo.

*¬øCu√°nto tiempo tarda en llegar el material?*
El material se entrega de forma inmediata despu√©s de confirmar el pago, generalmente en menos de 5 minutos.

*¬øOfrecen descuentos por volumen?*
S√≠, tenemos paquetes especiales con descuentos significativos para compras de 5, 10 o m√°s tarjetas.
"""
    
    keyboard = [
        [KeyboardButton("üí∞ Pagar Ahora"), KeyboardButton("‚¨ÖÔ∏è Volver al Men√∫")],
    ]
    
    reply_markup = create_reply_keyboard(keyboard)
    
    if update.callback_query:
        await update.callback_query.edit_message_text(text=mensaje, parse_mode='Markdown')
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text="Selecciona una opci√≥n:",
            reply_markup=reply_markup
        )
    else:
        await update.message.reply_text(text=mensaje, parse_mode='Markdown')
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text="Selecciona una opci√≥n:",
            reply_markup=reply_markup
        )
    
    return FAQ

async def referrals_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Muestra el sistema de referidos mejorado."""
    user_id = str(update.effective_user.id)
    
    # Crear un enlace de referido √∫nico
    bot = await context.bot.get_me()
    referral_link = f"https://t.me/{bot.username}?start={user_id}"
    
    # Contar referidos
    user_referrals = len(referrals.get(user_id, []))
    
    mensaje = f"""
üëë *PROGRAMA DE REFERENCIAS VIP* üëë

Tu enlace personal de referido:
`{referral_link}`

Has referido a: *{user_referrals} personas*

*NUEVOS BENEFICIOS EXCLUSIVOS:*

üîπ *Nivel Bronce (3 referidos):*
   - 15% de descuento en tu pr√≥xima compra
   - Acceso a material exclusivo
   - 1 tarjeta VISA gratis

üîπ *Nivel Plata (7 referidos):*
   - 2 tarjetas premium gratis
   - 25% de descuento en el curso b√°sico
   - Soporte prioritario 24/7
   - Acceso a grupo privado de tips

üîπ *Nivel Oro (15 referidos):*
   - 5 tarjetas premium gratis
   - 50% de descuento en cualquier curso
   - Acceso a grupo VIP de carding
   - Mentor√≠a personalizada (1 hora)

üîπ *Nivel Diamante (25+ referidos):*
   - Curso completo GRATIS
   - 10 tarjetas premium gratis
   - Comisi√≥n del 15% por cada compra de tus referidos
   - Acceso a material exclusivo de alta gama
   - Mentor√≠a VIP ilimitada por 1 mes

‚ö° *PROMOCI√ìN ESPECIAL*: Por tiempo limitado, cada nuevo referido te da una entrada a nuestro sorteo mensual de $1,000 USD en crypto.

üíé *BONO EXTRA*: Si alcanzas 50 referidos, recibir√°s un paquete completo valorado en $10,000 totalmente GRATIS.

Comparte tu enlace ahora y comienza a ganar.
"""
    
    # Para compartir el enlace, usamos un bot√≥n inline
    inline_keyboard = [
        [InlineKeyboardButton("üì≤ Compartir Enlace", switch_inline_query=f"Te invito a unirte con mi enlace: {referral_link}")]
    ]
    inline_markup = create_inline_keyboard(inline_keyboard)
    
    keyboard = [
        [KeyboardButton("‚¨ÖÔ∏è Volver al Men√∫")],
    ]
    reply_markup = create_reply_keyboard(keyboard)
    
    if update.callback_query:
        await update.callback_query.edit_message_text(text=mensaje, parse_mode='Markdown')
        # Enviamos el bot√≥n para compartir como un mensaje separado con teclado inline
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text="Haz clic para compartir tu enlace:",
            reply_markup=inline_markup
        )
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text="O vuelve al men√∫ principal:",
            reply_markup=reply_markup
        )
    else:
        await update.message.reply_text(text=mensaje, parse_mode='Markdown')
        # Enviamos el bot√≥n para compartir como un mensaje separado con teclado inline
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text="Haz clic para compartir tu enlace:",
            reply_markup=inline_markup
        )
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text="O vuelve al men√∫ principal:",
            reply_markup=reply_markup
        )
    
    return REFERRALS

async def products_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Muestra el men√∫ de productos."""
    mensaje = """
üî• *CAT√ÅLOGO DE PRODUCTOS PREMIUM* üî•

üí≥ *TARJETAS PREMIUM:*
1Ô∏è‚É£ AMEX Platinum üíé - $450 MXN (95% √©xito)
2Ô∏è‚É£ VISA Signature üîµ - $400 MXN (93% √©xito)
3Ô∏è‚É£ MasterCard Black ‚ö´ - $420 MXN (94% √©xito)
4Ô∏è‚É£ Discover üü† - $380 MXN (90% √©xito)

üì¶ *PACKS ESPECIALES:*
5Ô∏è‚É£ Pack 5 AMEX üì¶ - $2,000 MXN (AHORRA $250)
6Ô∏è‚É£ Pack 10 AMEX üì¶üì¶ - $3,500 MXN (AHORRA $1,000)
7Ô∏è‚É£ Pack Mixto üîÑ - $3,800 MXN (10 tarjetas variadas)

üìö *CURSOS Y MENTOR√çA:*
8Ô∏è‚É£ Curso B√°sico üìö - $1,500 MXN (Incluye 3 tarjetas)
9Ô∏è‚É£ Curso Avanzado üéì - $3,500 MXN (Incluye 7 tarjetas)
üîü Mentor√≠a 1:1 üë®‚Äçüè´ - $5,000 MXN (5 sesiones + material)

üíµ *BILLETES CLONADOS:*
1Ô∏è1Ô∏è‚É£ Billetes Clon Premium üíµ - Pasan Rayos UV y Plum√≥n
   ‚Ä¢ $500 (caf√©s y azules)
   ‚Ä¢ $200 y $100
   
   üì¶ *PROMOCIONES BILLETES:*
   ‚Ä¢ $2,000 invertidos = $10,000 en billetes üí∏
   ‚Ä¢ $5,000 invertidos = $23,000 en billetes üí∞
   ‚Ä¢ $10,000 invertidos = $50,000 en billetes ü§ë
   ‚Ä¢ Pedido m√≠nimo para env√≠o por DHL

‚ö° *TODOS NUESTROS PRODUCTOS INCLUYEN:*
‚úÖ Garant√≠a de reemplazo
‚úÖ Soporte t√©cnico 24/7
‚úÖ Entrega inmediata tras confirmaci√≥n
‚úÖ Material verificado y probado

üî• *OFERTA ESPECIAL:* 15% DESCUENTO en tu primera compra con c√≥digo "WELCOME15"

üëá *Selecciona un producto para ver m√°s detalles*
"""
    
    keyboard = [
        [KeyboardButton("1Ô∏è‚É£ AMEX Platinum üíé"), KeyboardButton("2Ô∏è‚É£ VISA Signature üîµ")],
        [KeyboardButton("3Ô∏è‚É£ MasterCard Black ‚ö´"), KeyboardButton("4Ô∏è‚É£ Discover üü†")],
        [KeyboardButton("5Ô∏è‚É£ Pack 5 AMEX üì¶"), KeyboardButton("6Ô∏è‚É£ Pack 10 AMEX üì¶üì¶")],
        [KeyboardButton("7Ô∏è‚É£ Pack Mixto üîÑ"), KeyboardButton("8Ô∏è‚É£ Curso B√°sico üìö")],
        [KeyboardButton("9Ô∏è‚É£ Curso Avanzado üéì"), KeyboardButton("üîü Mentor√≠a 1:1 üë®‚Äçüè´")],
        [KeyboardButton("1Ô∏è1Ô∏è‚É£ Billetes Clon Premium üíµ")],
        [KeyboardButton("üî• Oferta Especial"), KeyboardButton("‚¨ÖÔ∏è Volver al Men√∫")],
    ]
    
    reply_markup = create_reply_keyboard(keyboard)
    
    if update.callback_query:
        await update.callback_query.edit_message_text(text=mensaje, parse_mode='Markdown')
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text="Selecciona un producto para ver m√°s detalles:",
            reply_markup=reply_markup
        )
    else:
        await update.message.reply_text(text=mensaje, parse_mode='Markdown')
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text="Selecciona un producto para ver m√°s detalles:",
            reply_markup=reply_markup
        )
    
    return PRODUCTS

async def product_selected(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Maneja la selecci√≥n de un producto espec√≠fico."""
    product_text = update.message.text
    
    # Mapeo de productos a precios
    product_prices = {
        "1Ô∏è‚É£ AMEX Platinum üíé": 450,
        "2Ô∏è‚É£ VISA Signature üîµ": 400,
        "3Ô∏è‚É£ MasterCard Black ‚ö´": 420,
        "4Ô∏è‚É£ Discover üü†": 380,
        "5Ô∏è‚É£ Pack 5 AMEX üì¶": 2000,
        "6Ô∏è‚É£ Pack 10 AMEX üì¶üì¶": 3500,
        "7Ô∏è‚É£ Pack Mixto üîÑ": 3800,
        "8Ô∏è‚É£ Curso B√°sico üìö": 1500,
        "9Ô∏è‚É£ Curso Avanzado üéì": 3500,
        "üîü Mentor√≠a 1:1 üë®‚Äçüè´": 5000,
        "1Ô∏è1Ô∏è‚É£ Billetes Clon Premium üíµ": 2000
    }
    
    # Obtener el precio del producto seleccionado
    if product_text in product_prices:
        product_name = product_text.split(" ", 1)[1] if " " in product_text else product_text
        price = product_prices[product_text]
        
        # Caso especial para billetes clonados
        if "Billetes Clon Premium" in product_text:
            mensaje = f"""
üíµ *BILLETES CLON PREMIUM* üíµ

üîç *CARACTER√çSTICAS SUPERIORES:*
‚úÖ Pasan prueba de Rayos UV ‚ò¢Ô∏è
‚úÖ Pasan prueba de Plum√≥n detector üñåÔ∏è
‚úÖ Alta calidad de impresi√≥n HD üñ®Ô∏è
‚úÖ Textura y peso similar al original üëå
‚úÖ Marca de agua visible a contraluz üîé

üí∞ *DENOMINACIONES DISPONIBLES:*
‚Ä¢ $500 MXN (versiones caf√© y azul) üü§üîµ
‚Ä¢ $200 MXN (versi√≥n verde) üü¢
‚Ä¢ $100 MXN (versi√≥n roja) üî¥

üì¶ *PROMOCIONES ESPECIALES* üî•:
‚Ä¢ $2,000 invertidos ‚û°Ô∏è $10,000 en billetes üí∏ (x5 tu inversi√≥n)
‚Ä¢ $5,000 invertidos ‚û°Ô∏è $23,000 en billetes üí∞ (x4.6 tu inversi√≥n)
‚Ä¢ $10,000 invertidos ‚û°Ô∏è $50,000 en billetes ü§ë (x5 tu inversi√≥n)

üöö *ENV√çO Y LOG√çSTICA:*
‚Ä¢ Pedido m√≠nimo para env√≠o por DHL ‚ÄºÔ∏è
‚Ä¢ Entrega discreta y segura en toda la Rep√∫blica üì¨
‚Ä¢ Empaque especial anti-detecci√≥n üîí
‚Ä¢ Seguimiento en tiempo real üì±

‚ö†Ô∏è *IMPORTANTE:*
‚Ä¢ Puedes elegir combinaci√≥n de billetes (caf√©s, azules o verdes)
‚Ä¢ Pedidos mayores a $10,000 reciben env√≠o GRATIS üéÅ
‚Ä¢ Disponibilidad inmediata ‚ö°
‚Ä¢ Reposici√≥n garantizada en caso de p√©rdida postal üîÑ

üí≥ *M√âTODOS DE PAGO ACEPTADOS:*

üîê *CRIPTOMONEDAS (RECOMENDADO):*

‚Ä¢ *Bitcoin (BTC):*
```
bc1qnctxqv5x3mkxts0wwjhrf7jfgkveskefgjzvxc
```

‚Ä¢ *Tether (USDT):*
```
TVEzPvhRKiZJxDBDXyu5wBaYp6GNS3n13N
```

‚Ä¢ *Dogecoin (DOGE):*
```
D8pxbdYEjE5gAdgu6iZ4PvuuMENFYhJLhx
```

‚Ä¢ *Binance Coin (BNB):*
```
0x5b0d069c697637870FE9E44216039CdacBe65F22
```

üè¶ *TRANSFERENCIA BANCARIA:*

‚Ä¢ *CUENTA:*
```
943393460018
```

‚Ä¢ *CLABE:*
```
058597000070781636
```

‚Ä¢ *TITULAR:*
```
Juan Jes√∫s Salcido dominguez
```

‚Ä¢ *DEP√ìSITO OXXO (TARJETA):*
```
4741742972795879
```

üîí *PROCESO DE COMPRA SEGURO:*
1Ô∏è‚É£ Realiza tu pago por el monto deseado
2Ô∏è‚É£ Env√≠a comprobante con el bot√≥n de abajo
3Ô∏è‚É£ Especifica denominaciones deseadas y direcci√≥n de env√≠o
4Ô∏è‚É£ Recibe confirmaci√≥n y c√≥digo de seguimiento
5Ô∏è‚É£ Disfruta de tu producto premium

Para continuar con tu compra, realiza el pago y env√≠a el comprobante üì∏
"""
        else:
            # Mensaje normal para otros productos
            mensaje = f"""
üõí *PRODUCTO SELECCIONADO:* {product_name}
üíµ *PRECIO:* ${price} MXN

‚úÖ *Si est√°s seguro de tu compra, realiza el pago y env√≠a la foto del comprobante* üì∏

Utiliza cualquiera de los siguientes m√©todos de pago:

üîê *CRIPTOMONEDAS (RECOMENDADO):*

‚Ä¢ *Bitcoin (BTC):*
```
bc1qnctxqv5x3mkxts0wwjhrf7jfgkveskefgjzvxc
```

‚Ä¢ *Tether (USDT):*
```
TVEzPvhRKiZJxDBDXyu5wBaYp6GNS3n13N
```

‚Ä¢ *Dogecoin (DOGE):*
```
D8pxbdYEjE5gAdgu6iZ4PvuuMENFYhJLhx
```

‚Ä¢ *Binance Coin (BNB):*
```
0x5b0d069c697637870FE9E44216039CdacBe65F22
```

üè¶ *TRANSFERENCIA BANCARIA:*

‚Ä¢ *CUENTA:*
```
943393460018
```

‚Ä¢ *CLABE:*
```
058597000070781636
```

‚Ä¢ *TITULAR:*
```
Juan Jes√∫s Salcido dominguez
```

‚Ä¢ *DEP√ìSITO OXXO (TARJETA):*
```
4741742972795879
```

‚ö†Ô∏è *IMPORTANTE*: 
‚Ä¢ Env√≠a foto del comprobante de pago usando el bot√≥n de abajo
‚Ä¢ Especifica qu√© producto est√°s comprando
‚Ä¢ Recibir√°s tu material en minutos tras confirmar el pago

üîí *PROCESO DE COMPRA:*
1Ô∏è‚É£ Realiza tu pago
2Ô∏è‚É£ Env√≠a comprobante con el bot√≥n de abajo
3Ô∏è‚É£ Recibe tu material en minutos
"""
        
        # Guardar la selecci√≥n en el contexto del usuario
        context.user_data["selected_product"] = product_name
        context.user_data["selected_price"] = price
        
        keyboard = [
            [KeyboardButton("üì∏ Enviar Comprobante")],
            [KeyboardButton("‚¨ÖÔ∏è Volver al Men√∫")],
        ]
        
        reply_markup = create_reply_keyboard(keyboard)
        
        await update.message.reply_text(
            text=mensaje,
            parse_mode='Markdown',
            reply_markup=reply_markup
        )
        
        return PAYMENT
    else:
        await update.message.reply_text(
            "‚ö†Ô∏è Producto no reconocido. Por favor, selecciona una opci√≥n v√°lida."
        )
        return await products_menu(update, context)

def main() -> None:
    """Inicia el bot."""
    try:
        # Token del bot obtenido de BotFather
        token = os.environ.get("TELEGRAM_TOKEN", "7476575828:AAGlDaQmH8w4rf0oLyTba8z6duJ91E4QFBo")
        application = Application.builder().token(token).build()
        
        # Manejador de conversaci√≥n principal
        conv_handler = ConversationHandler(
            entry_points=[CommandHandler("start", start)],
            states={
                MAIN_MENU: [
                    MessageHandler(filters.TEXT & ~filters.COMMAND, text_handler),
                    CallbackQueryHandler(button_callback)
                ],
                PRODUCTS: [
                    MessageHandler(filters.TEXT & ~filters.COMMAND, text_handler),
                    CallbackQueryHandler(button_callback)
                ],
                PAYMENT: [
                    MessageHandler(filters.TEXT & ~filters.COMMAND, text_handler),
                    CallbackQueryHandler(button_callback)
                ],
                FAQ: [
                    MessageHandler(filters.TEXT & ~filters.COMMAND, text_handler),
                    CallbackQueryHandler(button_callback)
                ],
                REFERRALS: [
                    MessageHandler(filters.TEXT & ~filters.COMMAND, text_handler),
                    CallbackQueryHandler(button_callback)
                ],
                WAITING_RECEIPT: [
                    MessageHandler(filters.PHOTO, handle_receipt),
                    MessageHandler(filters.TEXT & ~filters.COMMAND, text_handler)
                ],
            },
            fallbacks=[CommandHandler("start", start)],
        )
        
        # Manejador para mensajes fuera de la conversaci√≥n
        application.add_handler(conv_handler)
        application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, unknown_text))
        
        # Manejador para errores
        application.add_error_handler(error_handler)
        
        # Inicia el bot
        logging.info("Bot iniciado correctamente")
        application.run_polling()
    except Exception as e:
        logging.error(f"Error al iniciar el bot: {e}")

async def unknown_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Maneja mensajes de texto desconocidos fuera de la conversaci√≥n."""
    await update.message.reply_text(
        "‚ö†Ô∏è Comando no identificado. Por favor, presiona /start para iniciar el bot correctamente."
    )

async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Maneja errores y los registra."""
    logging.error(f"Error: {context.error} - Update: {update}")
    try:
        if update and update.effective_message:
            await update.effective_message.reply_text(
                "‚ùå Ha ocurrido un error inesperado. Por favor, intenta nuevamente o contacta al administrador."
            )
    except Exception as e:
        logging.error(f"Error al manejar el error: {e}")

if __name__ == "__main__":
    main()